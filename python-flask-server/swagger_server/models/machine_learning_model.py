# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.machine_learning_model_hyperparameters import MachineLearningModelHyperparameters  # noqa: F401,E501
from swagger_server import util


class MachineLearningModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_type: Object=None, training_data_source: Object=None, hyperparameters: MachineLearningModelHyperparameters=None, augmentation_enabled: Object=None):  # noqa: E501
        """MachineLearningModel - a model defined in Swagger

        :param model_type: The model_type of this MachineLearningModel.  # noqa: E501
        :type model_type: Object
        :param training_data_source: The training_data_source of this MachineLearningModel.  # noqa: E501
        :type training_data_source: Object
        :param hyperparameters: The hyperparameters of this MachineLearningModel.  # noqa: E501
        :type hyperparameters: MachineLearningModelHyperparameters
        :param augmentation_enabled: The augmentation_enabled of this MachineLearningModel.  # noqa: E501
        :type augmentation_enabled: Object
        """
        self.swagger_types = {
            'model_type': Object,
            'training_data_source': Object,
            'hyperparameters': MachineLearningModelHyperparameters,
            'augmentation_enabled': Object
        }

        self.attribute_map = {
            'model_type': 'model_type',
            'training_data_source': 'training_data_source',
            'hyperparameters': 'hyperparameters',
            'augmentation_enabled': 'augmentation_enabled'
        }
        self._model_type = model_type
        self._training_data_source = training_data_source
        self._hyperparameters = hyperparameters
        self._augmentation_enabled = augmentation_enabled

    @classmethod
    def from_dict(cls, dikt) -> 'MachineLearningModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineLearningModel of this MachineLearningModel.  # noqa: E501
        :rtype: MachineLearningModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_type(self) -> Object:
        """Gets the model_type of this MachineLearningModel.

        Select the machine learning model for detection.  # noqa: E501

        :return: The model_type of this MachineLearningModel.
        :rtype: Object
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: Object):
        """Sets the model_type of this MachineLearningModel.

        Select the machine learning model for detection.  # noqa: E501

        :param model_type: The model_type of this MachineLearningModel.
        :type model_type: Object
        """

        self._model_type = model_type

    @property
    def training_data_source(self) -> Object:
        """Gets the training_data_source of this MachineLearningModel.

        Dataset type used for model training, such as satellite or multispectral data.  # noqa: E501

        :return: The training_data_source of this MachineLearningModel.
        :rtype: Object
        """
        return self._training_data_source

    @training_data_source.setter
    def training_data_source(self, training_data_source: Object):
        """Sets the training_data_source of this MachineLearningModel.

        Dataset type used for model training, such as satellite or multispectral data.  # noqa: E501

        :param training_data_source: The training_data_source of this MachineLearningModel.
        :type training_data_source: Object
        """

        self._training_data_source = training_data_source

    @property
    def hyperparameters(self) -> MachineLearningModelHyperparameters:
        """Gets the hyperparameters of this MachineLearningModel.


        :return: The hyperparameters of this MachineLearningModel.
        :rtype: MachineLearningModelHyperparameters
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters: MachineLearningModelHyperparameters):
        """Sets the hyperparameters of this MachineLearningModel.


        :param hyperparameters: The hyperparameters of this MachineLearningModel.
        :type hyperparameters: MachineLearningModelHyperparameters
        """

        self._hyperparameters = hyperparameters

    @property
    def augmentation_enabled(self) -> Object:
        """Gets the augmentation_enabled of this MachineLearningModel.

        Toggle to apply data augmentation before training the model.  # noqa: E501

        :return: The augmentation_enabled of this MachineLearningModel.
        :rtype: Object
        """
        return self._augmentation_enabled

    @augmentation_enabled.setter
    def augmentation_enabled(self, augmentation_enabled: Object):
        """Sets the augmentation_enabled of this MachineLearningModel.

        Toggle to apply data augmentation before training the model.  # noqa: E501

        :param augmentation_enabled: The augmentation_enabled of this MachineLearningModel.
        :type augmentation_enabled: Object
        """

        self._augmentation_enabled = augmentation_enabled
