# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MlpreprocessingBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_data: Object=None, encoding_type: Object=None, train_test_split: Object=None):  # noqa: E501
        """MlpreprocessingBody - a model defined in Swagger

        :param input_data: The input_data of this MlpreprocessingBody.  # noqa: E501
        :type input_data: Object
        :param encoding_type: The encoding_type of this MlpreprocessingBody.  # noqa: E501
        :type encoding_type: Object
        :param train_test_split: The train_test_split of this MlpreprocessingBody.  # noqa: E501
        :type train_test_split: Object
        """
        self.swagger_types = {
            'input_data': Object,
            'encoding_type': Object,
            'train_test_split': Object
        }

        self.attribute_map = {
            'input_data': 'input_data',
            'encoding_type': 'encoding_type',
            'train_test_split': 'train_test_split'
        }
        self._input_data = input_data
        self._encoding_type = encoding_type
        self._train_test_split = train_test_split

    @classmethod
    def from_dict(cls, dikt) -> 'MlpreprocessingBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The mlpreprocessing_body of this MlpreprocessingBody.  # noqa: E501
        :rtype: MlpreprocessingBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_data(self) -> Object:
        """Gets the input_data of this MlpreprocessingBody.

        The dataset to preprocess for ML.  # noqa: E501

        :return: The input_data of this MlpreprocessingBody.
        :rtype: Object
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data: Object):
        """Sets the input_data of this MlpreprocessingBody.

        The dataset to preprocess for ML.  # noqa: E501

        :param input_data: The input_data of this MlpreprocessingBody.
        :type input_data: Object
        """

        self._input_data = input_data

    @property
    def encoding_type(self) -> Object:
        """Gets the encoding_type of this MlpreprocessingBody.

        Encoding type for categorical features, such as 'one-hot'.  # noqa: E501

        :return: The encoding_type of this MlpreprocessingBody.
        :rtype: Object
        """
        return self._encoding_type

    @encoding_type.setter
    def encoding_type(self, encoding_type: Object):
        """Sets the encoding_type of this MlpreprocessingBody.

        Encoding type for categorical features, such as 'one-hot'.  # noqa: E501

        :param encoding_type: The encoding_type of this MlpreprocessingBody.
        :type encoding_type: Object
        """

        self._encoding_type = encoding_type

    @property
    def train_test_split(self) -> Object:
        """Gets the train_test_split of this MlpreprocessingBody.

        Ratio for splitting data into training and test sets, between 0 and 1.  # noqa: E501

        :return: The train_test_split of this MlpreprocessingBody.
        :rtype: Object
        """
        return self._train_test_split

    @train_test_split.setter
    def train_test_split(self, train_test_split: Object):
        """Sets the train_test_split of this MlpreprocessingBody.

        Ratio for splitting data into training and test sets, between 0 and 1.  # noqa: E501

        :param train_test_split: The train_test_split of this MlpreprocessingBody.
        :type train_test_split: Object
        """

        self._train_test_split = train_test_split
