# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.mastomys_natalensis_detection import MastomysNatalensisDetection  # noqa: F401,E501
from swagger_server import util


class RodentHabitatDetection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, input_data: Object=None, model_used: Object=None, geospatial_analysis: Object=None, overlays: MastomysNatalensisDetection=None, output_format: Object=None):  # noqa: E501
        """RodentHabitatDetection - a model defined in Swagger

        :param input_data: The input_data of this RodentHabitatDetection.  # noqa: E501
        :type input_data: Object
        :param model_used: The model_used of this RodentHabitatDetection.  # noqa: E501
        :type model_used: Object
        :param geospatial_analysis: The geospatial_analysis of this RodentHabitatDetection.  # noqa: E501
        :type geospatial_analysis: Object
        :param overlays: The overlays of this RodentHabitatDetection.  # noqa: E501
        :type overlays: MastomysNatalensisDetection
        :param output_format: The output_format of this RodentHabitatDetection.  # noqa: E501
        :type output_format: Object
        """
        self.swagger_types = {
            'input_data': Object,
            'model_used': Object,
            'geospatial_analysis': Object,
            'overlays': MastomysNatalensisDetection,
            'output_format': Object
        }

        self.attribute_map = {
            'input_data': 'input_data',
            'model_used': 'model_used',
            'geospatial_analysis': 'geospatial_analysis',
            'overlays': 'overlays',
            'output_format': 'output_format'
        }
        self._input_data = input_data
        self._model_used = model_used
        self._geospatial_analysis = geospatial_analysis
        self._overlays = overlays
        self._output_format = output_format

    @classmethod
    def from_dict(cls, dikt) -> 'RodentHabitatDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RodentHabitatDetection of this RodentHabitatDetection.  # noqa: E501
        :rtype: RodentHabitatDetection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_data(self) -> Object:
        """Gets the input_data of this RodentHabitatDetection.

        Satellite imagery or LiDAR data to be analyzed.  # noqa: E501

        :return: The input_data of this RodentHabitatDetection.
        :rtype: Object
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data: Object):
        """Sets the input_data of this RodentHabitatDetection.

        Satellite imagery or LiDAR data to be analyzed.  # noqa: E501

        :param input_data: The input_data of this RodentHabitatDetection.
        :type input_data: Object
        """

        self._input_data = input_data

    @property
    def model_used(self) -> Object:
        """Gets the model_used of this RodentHabitatDetection.

        Machine learning model to use for detection.  # noqa: E501

        :return: The model_used of this RodentHabitatDetection.
        :rtype: Object
        """
        return self._model_used

    @model_used.setter
    def model_used(self, model_used: Object):
        """Sets the model_used of this RodentHabitatDetection.

        Machine learning model to use for detection.  # noqa: E501

        :param model_used: The model_used of this RodentHabitatDetection.
        :type model_used: Object
        """

        self._model_used = model_used

    @property
    def geospatial_analysis(self) -> Object:
        """Gets the geospatial_analysis of this RodentHabitatDetection.

        Enable geospatial overlays to refine the detection of suitable habitats.  # noqa: E501

        :return: The geospatial_analysis of this RodentHabitatDetection.
        :rtype: Object
        """
        return self._geospatial_analysis

    @geospatial_analysis.setter
    def geospatial_analysis(self, geospatial_analysis: Object):
        """Sets the geospatial_analysis of this RodentHabitatDetection.

        Enable geospatial overlays to refine the detection of suitable habitats.  # noqa: E501

        :param geospatial_analysis: The geospatial_analysis of this RodentHabitatDetection.
        :type geospatial_analysis: Object
        """

        self._geospatial_analysis = geospatial_analysis

    @property
    def overlays(self) -> MastomysNatalensisDetection:
        """Gets the overlays of this RodentHabitatDetection.


        :return: The overlays of this RodentHabitatDetection.
        :rtype: MastomysNatalensisDetection
        """
        return self._overlays

    @overlays.setter
    def overlays(self, overlays: MastomysNatalensisDetection):
        """Sets the overlays of this RodentHabitatDetection.


        :param overlays: The overlays of this RodentHabitatDetection.
        :type overlays: MastomysNatalensisDetection
        """

        self._overlays = overlays

    @property
    def output_format(self) -> Object:
        """Gets the output_format of this RodentHabitatDetection.

        Format for the output data.  # noqa: E501

        :return: The output_format of this RodentHabitatDetection.
        :rtype: Object
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format: Object):
        """Sets the output_format of this RodentHabitatDetection.

        Format for the output data.  # noqa: E501

        :param output_format: The output_format of this RodentHabitatDetection.
        :type output_format: Object
        """

        self._output_format = output_format
